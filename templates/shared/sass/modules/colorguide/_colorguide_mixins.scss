//////////////////////////////
// MIXINS: For Modules 
//////////////////////////////

// From https://github.com/Team-Sass/Style-Prototypes
@mixin generate-colour-guide($colours...) {
  $singleton: false;
  $length: 0;

  @if length($colours) == 1 and type-of(nth($colours, 1)) == 'list' {
    $colours: nth($colours, 1);
    $singleton: true;
    $length: length($colours);
  }
  @else if length($colours) > 0 {
    $length: length(nth($colours, 1));
  }

  @if length($colours) > 0 {
    .color-guide {
      ul {
        margin: 0;
        padding: 0;
      }

      li {
        list-style: none;
        height: 3em;
        position: relative;

        @include grid-span(1, 1, $length, 0, $output-style: 'float');

        &:nth-child(#{$length}n) {
          @include grid-span(1, ($length), $length, 0, $output-style: 'float');
          margin-right: 0;
        }

        &:before, &:after,
        &:nth-child(#{$length}n):before,
        &:nth-child(#{$length}n):after {
          position: absolute;
          height: 1.25em;
          width: 100%;
          @include box-sizing('border-box');
          margin: 0;
          padding: 0;
          left: 0;
          text-align: center;
        }

        &:before {
          top: .25em;
        }
        &:after {
          bottom: .25em;
        }

        @if $singleton == true {
          $i: 1;
          @each $colour in $colours {
            &:nth-child(#{$i}) {
              background-color: $colour;
              @include colour-name($colour, $i);
            }
            $i: $i+1;
          }
        }
        @else {
          $i: 1;
          @each $colour in $colours {
            $j: 1;
            @each $single in $colour {
              &:nth-child(#{$i}) {
                background-color: $single;
                @include colour-name($single, $j);
              }
              $j: $j+1;
              $i: $i+1;
            }
            $j: 1;
          }
        }

      }
    }
  }
}

@mixin generate-color-guide($colors...) {
  @include generate-colour-guide($colors);
}

@mixin colour-name($colour, $position) {
  $lightness: lightness($colour);

  $color: black;

  @if $lightness < 50% {
    $color: white;
  }
  
  &:before, &:after {
    color: $color;
  }
  &:before {
    content: '#{$colour}';
  }
  &:after {
    content: attr(data-sass);
  }
}