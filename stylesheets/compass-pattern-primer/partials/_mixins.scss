@mixin simple-background-gradient($color, $background-gradient-pos, $background-gradient-1, $background-gradient-2) {
  color: $color;
  // provide background color for older IEs
  background-color: background-color-mix($background-gradient-1, $background-gradient-2);
  @include background-image(linear-gradient($background-gradient-pos, $background-gradient-1, $background-gradient-2));
}

@mixin border-outline($type: border, $width: 1px, $style: solid, $color: #333, $offset: false) {
  @include border-outline-check($type, $width, $style, $color, $offset);
  
  @if $width == 'none' {
      #{$type}: $width;
  } @else if $width == false {
  } @else {
    #{$type}: {
      width: $width;
      style: $style;
      color: $color;
      @if $type == 'outline' and $offset {
        offset: $offset;
      }
    }
  }
}

@mixin border-outline-check($type, $width, $style, $color, $offset) {
  @if $type == 'border' and $offset {
    @warn "#{$type} does not use offset";
  }
  @if $type == 'outline' { // wish this was cleaner! there's probably a better way to do this.
    $widths: length($width);
    $styles: length($style);
    $colors: length($color);
    $offsets: length($offset);
    @if $widths > 1 or $styles > 1 or $colors > 1 or $offsets > 1   {
       @warn "You cannot use mulitple values for #{$type} - only the first value will be used!";
    }
  }  
}

@mixin margin-padding($type, $amount: false, $side: false) {
  @if $side {
    #{$type}-#{$side}: $amount;
  } @else {
    #{$type}: $amount;
  }
}

@mixin type-size($size, $leading: false) {
  font-size: $size;
  @if $leading { line-height: $leading; }
}

@mixin bold-italic-uppercase-variant($bold :default, $italic: false, $uppercase: false, $variant: false) {
  @if $bold { font-weight: bold; } @else { font-weight: normal; }
  @if $italic { font-style: italic; }
  @if $uppercase { text-transform: uppercase; }
  @if $variant { font-variant: small-caps; }
}

@mixin content-before-after($content, $before: default, $after:false ) {
  @if $before { &:before { content: $content; } }
  @if $after { &:after { content: $content; } }
}

// From https://github.com/Team-Sass/Style-Prototypes
@mixin generate-colour-guide($colours...) {
  $singleton: false;
  $length: 0;

  @if length($colours) == 1 and type-of(nth($colours, 1)) == 'list' {
    $colours: nth($colours, 1);
    $singleton: true;
    $length: length($colours);
  }
  @else if length($colours) > 0 {
    $length: length(nth($colours, 1));
  }

  @if length($colours) > 0 {
    .color-guide {
      ul {
        margin: 0;
        padding: 0;
      }

      li {
        list-style: none;
        height: 3em;
        position: relative;

        @include grid-span(1, 1, $length, 0, $output-style: 'float');

        &:nth-child(#{$length}n) {
          @include grid-span(1, ($length), $length, 0, $output-style: 'float');
          margin-right: 0;
        }

        &:before, &:after,
        &:nth-child(#{$length}n):before,
        &:nth-child(#{$length}n):after {
          position: absolute;
          height: 1.25em;
          width: 100%;
          @include box-sizing('border-box');
          margin: 0;
          padding: 0;
          left: 0;
          text-align: center;
        }

        &:before {
          top: .25em;
        }
        &:after {
          bottom: .25em;
        }

        @if $singleton == true {
          $i: 1;
          @each $colour in $colours {
            &:nth-child(#{$i}) {
              background-color: $colour;
              @include colour-name($colour, $i);
            }
            $i: $i+1;
          }
        }
        @else {
          $i: 1;
          @each $colour in $colours {
            $j: 1;
            @each $single in $colour {
              &:nth-child(#{$i}) {
                background-color: $single;
                @include colour-name($single, $j);
              }
              $j: $j+1;
              $i: $i+1;
            }
            $j: 1;
          }
        }

      }
    }
  }
}

@mixin generate-color-guide($colors...) {
  @include generate-colour-guide($colors);
}

@mixin colour-name($colour, $position) {
  $lightness: lightness($colour);

  $color: black;

  @if $lightness < 50% {
    $color: white;
  }
  
  &:before, &:after {
    color: $color;
  }
  &:before {
    content: '#{$colour}';
  }
  &:after {
    content: attr(data-sass);
  }
}